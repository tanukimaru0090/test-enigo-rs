use enigo::{Enigo,Key,KeyboardControllable,MouseButton,MouseControllable};
use std::thread;
use std::time::Duration;
use winapi::shared::windef::{HWND,RECT};
use winapi::um::winuser::{GetForegroundWindow,GetWindowRect,FindWindowA};
use std::ffi::CString;
use std::os::raw::c_void;




fn play_app(enigo: &mut Enigo,width:i32,height:i32,center_x:i32,center_y:i32){
    // ここにゲームのロジックを書く
    // タイトル項目の座標
    let mut title_menu:[(i32,i32);3] = [(0,0);3];
    title_menu[0].0 = center_x;
    title_menu[0].1 = center_y+20;

    title_menu[1].0 = center_x+100;
    title_menu[1].1 = center_y+100;
    
    title_menu[2].0 = center_x+150;
    title_menu[2].1 = center_y+150;

    // タイトル画面項目のシミュレーションテスト
    /*
    // 項目1
    std::thread::sleep(Duration::from_secs(1));
    enigo.mouse_move_to(title_menu[0].0,title_menu[0].1); 
    // 項目2
    std::thread::sleep(Duration::from_secs(1));
    enigo.mouse_move_to(title_menu[1].0,title_menu[1].1); 
    // 項目3
    std::thread::sleep(Duration::from_secs(1));
    enigo.mouse_move_to(title_menu[2].0,title_menu[2].1); 
    
 
    // 項目3
    std::thread::sleep(Duration::from_secs(1));
    enigo.mouse_move_to(title_menu[2].0,title_menu[2].1); 
    // 項目2
    std::thread::sleep(Duration::from_secs(1));
    enigo.mouse_move_to(title_menu[1].0,title_menu[1].1); 
    // 項目1
    std::thread::sleep(Duration::from_secs(1));
    enigo.mouse_move_to(title_menu[0].0,title_menu[0].1); 

    */



    loop{
    // 項目1
    std::thread::sleep(Duration::from_secs(1));
    enigo.mouse_move_to(title_menu[0].0,title_menu[0].1); 



    std::thread::sleep(Duration::from_secs(3));
    enigo.mouse_click(MouseButton::Left);
    std::thread::sleep(Duration::from_secs(3));
    }
    //println!("title_menu {}");
}

fn init_app(hwnd: HWND, enigo: &mut Enigo,width:&mut i32,height:&mut i32,center_x:&mut i32,center_y:&mut i32){
    // ウィンドウハンドルがNULLでないことを確認する
    if hwnd.is_null() {
        // エラーを表示して終了する
        eprintln!("ウィンドウハンドルの取得に失敗しました");
        return;
    }
    // 矩形サイズを取得する
    let mut rect = RECT{left:0,top:0,right:0,bottom:0};
    let result = unsafe{GetWindowRect(hwnd,&mut rect)};
    // 矩形サイズの取得が成功したことを確認する
    if result == 0 {
        // エラーを表示して終了する
        eprintln!("矩形サイズの取得に失敗しました");
        return;
    }
    // 矩形サイズから中心座標を計算する
    *width = rect.right -rect.left;
    *height = rect.bottom-rect.top;
    *center_x = rect.left+*width /2;
    *center_y = rect.top+*height/2;
    // 結果を表示する
    println!("init width:{} height:{} center x:{} y:{}",width,height,center_x,center_y);
    // 2秒待つ
    thread::sleep(Duration::from_secs(2));
    // マウスを中心に移動する
    enigo.mouse_move_to(*center_x as i32,*center_y as i32);
}

fn main(){
    let (mut width,mut height,mut center_x,mut center_y) = (0,0,0,0);
    let client_window_title = CString::new("irisu syndrome").unwrap();
    // ウィンドウハンドルを取得する
    let mut  hwnd = unsafe{FindWindowA(std::ptr::null_mut(),client_window_title.as_ptr())};
    std::thread::sleep(Duration::from_secs(2));
    // Enigoのインスタンスを作る
    let mut enigo = Enigo::new();
    // init_app関数を呼び出す
    init_app(hwnd, &mut enigo,&mut width,&mut height,&mut center_x,&mut center_y);
    // play_app関数を呼び出す
    play_app(&mut enigo,width,height,center_x,center_y);
    
}
